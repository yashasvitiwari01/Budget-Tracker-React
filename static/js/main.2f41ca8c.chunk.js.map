{"version":3,"sources":["components/MainHeader.js","components/DisplayBalance.js","components/History.js","components/HistoryBlock.js","components/NewTxnForm.js","components/NewTxns.jsx","components/DisplayGrid.js","components/ModalEdit.js","App.js","index.js"],"names":["MainHeader","title","type","Header","style","marginTop","DisplayBalance","value","color","size","Statistic","Label","Value","History","entry","id","description","isExpense","handleDelete","modalDisplayValues","useState","open","setOpen","result","setResult","Container","Segment","Grid","columns","textAlign","Row","Column","width","Icon","name","cursor","onClick","Confirm","onCancel","onConfirm","HistoryBlock","entries","map","NewTxnForm","amount","setDesc","setAmount","setTxnType","Form","Group","Input","label","placeholder","icon","onChange","e","target","iconPosition","compact","Checkbox","toggle","checked","prevState","NewTxn","handleAddTxn","resetEntry","Button","Or","primary","DisplayGrid","totalIncome","totalExpenses","divided","ModalEdit","error","idToEdit","isOpen","modalEditvalues","Modal","Content","Actions","negative","App","initialEntries","errorFlags","setEntries","setIsOpen","setIdToEdit","setTotalIncome","setTotalExpenses","balance","setBalance","setErrorFlag","length","idCounter","setIdCounter","useEffect","totalBalanceAmount","totalIncomeAmount","totalExpenseAmount","Number","updatedHistoryBlock","filter","selectedIndex","findIndex","alert","isNaN","concat","newEntries","changedIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f41ca8c.chunk.js","sourcesContent":["import {Header } from \"semantic-ui-react\";\r\nimport React from \"react\";\r\n\r\nexport default function MainHeader ({title, type=\"h2\"}){\r\n    return(\r\n        <>\r\n      <Header style={{marginTop:\"20px\"}}>{title}</Header>\r\n    \r\n        </>\r\n \r\n    )\r\n}","import React from \"react\";\r\nimport { Statistic } from \"semantic-ui-react\";\r\n\r\nexport default function DisplayBalance({title, value, color=\"black\", size=\"mini\"}){\r\n    return(\r\n        <Statistic size={size} color={color}>\r\n        <Statistic.Label >{title}</Statistic.Label>\r\n        <Statistic.Value>{`$`+value}</Statistic.Value>\r\n        </Statistic>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Grid, Segment, Icon, Confirm, Container } from \"semantic-ui-react\";\r\n\r\n// export default function History({description, value, isExpense= false}){\r\nexport default function History ({entry:{id,description, value, isExpense= false}, handleDelete, modalDisplayValues}){\r\nconst [ open, setOpen ] = useState(false);\r\nconst [ result, setResult] = useState(\"\");\r\n\r\nconst handleShow = () =>{\r\n    setOpen(true)\r\n}\r\n\r\nconst handleCancel =() =>{\r\n    setResult(\"cancelled\");\r\n    setOpen(false);\r\n}\r\n\r\nconst handleConfirm =() =>{\r\n    setResult(\"confirmed\");\r\n    setOpen(false);\r\n    handleDelete(id);    \r\n}\r\n    return(\r\n    <Container>\r\n        <Segment color={isExpense ? \"red\": \"green\"}>\r\n          <Grid columns ={3} textAlign=\"right\">\r\n          <Grid.Row>\r\n            <Grid.Column width={10} textAlign=\"left\" >{description}                      \r\n            </Grid.Column>\r\n            <Grid.Column width={3} textAlign=\"right\">{`$`+value}            \r\n            </Grid.Column>\r\n            <Grid.Column width={3} textAlign=\"right\">\r\n                <Icon name=\"edit\" color=\"green\" style={{cursor:\"pointer\"}} onClick={()=> modalDisplayValues(id)}/>\r\n                {/* <Icon name=\"trash\" color=\"red\" style={{cursor:\"pointer\"}} onClick={()=>handleDelete(id)}/> */}\r\n                <Icon name=\"trash\" color=\"red\" style={{cursor:\"pointer\"}} onClick={handleShow} />\r\n            </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            </Segment>\r\n             <Confirm\r\n                open={open}\r\n                result={result}\r\n                onCancel= {handleCancel}\r\n                onConfirm={handleConfirm} />\r\n            \r\n        \r\n    </Container>\r\n)\r\n}","import React from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport History from \"./History\";\r\n// export default function History({description, value, isExpense= false}){\r\nexport default function HistoryBlock ({entries, handleDelete,modalDisplayValues}){\r\n    return(\r\n        <Container>\r\n        {/* {entries.map((entry) => {\r\n          return(\r\n            <History description={entry.description} value={entry.value} isExpense = {entry.isExpense}/>\r\n        )})} */}\r\n        {/* above block of statements is equivalent to the one written below */}\r\n        {entries.map((entry) => (\r\n            <History key={entry.id} \r\n            // description={entry.description} value={entry.value} isExpense = {entry.isExpense}/>\r\n            // instead of passing on individual values, we are passing the entire object and handle it\r\n            // in the called component\r\n            entry = {entry}  \r\n            handleDelete ={handleDelete}\r\n            modalDisplayValues = {modalDisplayValues} />\r\n        ))}\r\n\r\n{/* above block of statements is equivalent to the one written below as above we are looping through the\r\ncontents of the array while below we were calling its 3 times making the code redundant  */}\r\n        \r\n{/* \r\n        <History description={entries[1].description} value={entries[1].value} isExpense = {entries[1].isExpense}/>\r\n        <History description={entries[2].description} value={entries[2].value} isExpense = {entries[2].isExpense}/>\r\n        <History description={entries[3].description} value={entries[3].value} isExpense = {entries[3].isExpense}/> */}\r\n \r\n</Container>   \r\n    )\r\n}","import React from \"react\";\r\nimport {Form, Checkbox, Segment } from \"semantic-ui-react\"\r\n\r\nexport default function NewTxnForm({description, amount, isExpense, setDesc, setAmount, setTxnType}){\r\n\r\n    return( \r\n        <Form>\r\n          <Form.Group> \r\n            <Form.Input label='Description' placeholder=\"Transaction Type\" icon=\"tags\" width=\"9\" value={description} \r\n            onChange={(e)=>setDesc(e.target.value)}/>\r\n            <Form.Input label='Value' placeholder=\"Transaction Amount\" icon=\"dollar\" iconPosition=\"left\" width=\"4\" value={amount} \r\n            onChange={(e)=>setAmount(e.target.value)}/>\r\n            <Segment compact>\r\n            <Checkbox toggle label=\"Is Expense?\" checked={isExpense} onChange ={() => setTxnType(prevState => !prevState)}></Checkbox>\r\n            </Segment>\r\n          </Form.Group>\r\n        </Form>\r\n    )\r\n} ","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport NewTxnForm from \"./NewTxnForm\"\r\n\r\nexport default function NewTxn({handleAddTxn, resetEntry, description,amount,isExpense, setDesc,setAmount,setTxnType}){\r\n  \r\n  return(\r\n    // <Form>\r\n    <>\r\n      <NewTxnForm description={description}\r\n                  amount={amount}\r\n                  isExpense = {isExpense}\r\n                  setDesc = {setDesc}\r\n                  setAmount = {setAmount}\r\n                  setTxnType={setTxnType}/>\r\n          <Button.Group style={{marginTop:\"20px\"}}>\r\n            <Button onClick={()=>resetEntry()}>Cancel</Button>   \r\n            <Button.Or/>\r\n            <Button primary onClick={()=>handleAddTxn()}>Ok</Button>\r\n          </Button.Group>\r\n          </>\r\n    // </Form>\r\n    )\r\n}","import React from \"react\";\r\nimport { Segment, Grid } from \"semantic-ui-react\";\r\nimport DisplayBalance from \"./DisplayBalance\";\r\n\r\nexport default function DisplayGrid({totalIncome, totalExpenses}){\r\n    return(\r\n          <Segment textAlign=\"center\">\r\n          <Grid columns ={2} divided>\r\n          <Grid.Row>\r\n            <Grid.Column>\r\n                <DisplayBalance title=\"Income\" value={totalIncome} color=\"green\"/>             \r\n            </Grid.Column>\r\n            <Grid.Column>\r\n                <DisplayBalance title=\"Expenses\" value={totalExpenses} color=\"red\"/>   \r\n            </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\";\r\nimport { Button, Modal,Label } from \"semantic-ui-react\";\r\nimport NewTxnForm from \"./NewTxnForm\";\r\n\r\nexport default function ModalEdit({error,resetEntry,idToEdit, isOpen, description, amount, isExpense, setDesc,setAmount,setTxnType, modalEditvalues}){\r\n    return(\r\n       <Modal open={isOpen}>\r\n           <Modal.Header>Edit Entry</Modal.Header>\r\n           <Modal.Content>\r\n               <NewTxnForm \r\n                description = {description} \r\n                amount = {amount} \r\n                isExpense = {isExpense}\r\n                setDesc = {setDesc}\r\n                setAmount = {setAmount} \r\n                setTxnType={setTxnType}\r\n                /></Modal.Content>\r\n            {error ? <Label style={{color:\"red\"}}>{error}</Label> : null}\r\n\r\n           <Modal.Actions>\r\n                <Button onClick={()=>resetEntry()} negative>Cancel</Button>\r\n                <Button onClick={()=>modalEditvalues(idToEdit) } primary>Save</Button>\r\n           </Modal.Actions>          \r\n       </Modal>\r\n    )\r\n}\r\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { Container } from \"semantic-ui-react\"; \n\nimport MainHeader from './components/MainHeader';\nimport DisplayBalance from './components/DisplayBalance';\nimport HistoryBlock from './components/HistoryBlock';\nimport NewTxn from './components/NewTxns';\nimport DisplayGrid from './components/DisplayGrid';\nimport ModalEdit from \"./components/ModalEdit\";\n// import InterviewQuestion from './components/InterviewQuestion';\n\nfunction App() {\n  var initialEntries  = [\n    {\n      id: 1,\n      description : \"Work Income\",\n      value: 5000,\n      isExpense: false\n    },\n     {\n      id: 2,\n      description : \"House Rent\",\n      value: 200,\n      isExpense: true\n    },\n     {\n      id: 3,\n      description : \"Water Bill\",\n      value: 50,\n      isExpense: true\n    },\n     {\n      id: 4,\n      description : \"ELectricity Bill\",\n      value: 100,\n      isExpense: true\n    }\n  ]\n\n  var errorFlags= {\n    1: \"Amount Field cannot be left blank!\",\n    2: \"Please enter valid value for amount\",\n    3: \"Description field cannot be left blank\",\n    4: \"Expense cannot exceed the balance\",\n    5: \"Cannot spend more than the balance in account\"\n  }\n  const [entries, setEntries] = useState(initialEntries);\n  const [description, setDesc] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [isExpense, setTxnType] = useState(true);\n  const [isOpen, setIsOpen] = useState(false);\n  const [idToEdit, setIdToEdit] = useState();\n  const [totalIncome,setTotalIncome] = useState(0);\n  const [totalExpenses, setTotalExpenses] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [error,setErrorFlag] = useState();\n  var [idCounter,setIdCounter] = useState(initialEntries.length);\n\nuseEffect(() => {\n  let totalIncomeAmount = 0;\n  let totalExpenseAmount = 0;\n  let totalBalanceAmount = 0;\n\nentries.map(entry => {\n  if(entry.isExpense){\n   return (totalExpenseAmount += Number(entry.value));\n  }\n  return (totalIncomeAmount += Number(entry.value)) ;\n });\n\n totalBalanceAmount = totalIncomeAmount - totalExpenseAmount;\n \n (totalBalanceAmount > 0) ? setBalance(totalBalanceAmount) : setBalance(0);\n \n setTotalIncome(totalIncomeAmount);\n setTotalExpenses(totalExpenseAmount);\n},[entries]);\n\n  const handleDelete = id =>{\n    const updatedHistoryBlock = entries.filter((entry) => entry.id !== id);\n    setEntries(updatedHistoryBlock);\n  }\n\n  const handleAddTxn = () =>{\n    if(Number(amount) === null || description === \"\"){\n      alert(\"Please enter value/values!!!\");\n      return;\n    }\n    if (isExpense && balance === 0) {\n      alert(\"Cannot add an expense when no balance\");\n      resetEntry();\n      return;\n    }\n    if(Number(amount) > balance && isExpense){\n      alert(\"Cannot spend more than the balance in account\");\n      return;\n    }\n    if(isNaN(+amount)){\n      alert(\"Please enter a valid value for amount\");\n      return;\n    }\n\n    idCounter=idCounter+1;\n    setIdCounter(idCounter);\n\n    const updatedHistoryBlock = entries.concat({id: idCounter, description:description, value: amount, isExpense});\n    setEntries(updatedHistoryBlock);\n    resetEntry();\n  }\n\n  const modalDisplayValues = id => {\n    setIsOpen(true);\n    setErrorFlag();\n    let selectedIndex = entries.findIndex(entry => entry.id === id);\n    const entry = entries[selectedIndex];\n    setIdToEdit(id);\n    setDesc(entry.description);\n    setAmount(Number(entry.value));\n    setTxnType(entry.isExpense);\n  }\n\n  const modalEditvalues = idToEdit => {\n  //  setIsOpen(false);\n    const newEntries = [...entries];\n    const changedIndex = entries.findIndex(entry => entry.id === idToEdit);\n\n     if(amount === \"\" && description !== \"\"){\n       setErrorFlag(errorFlags[1]);\n       return;\n      }\n    if(description === \"\" && amount !== \"\"){\n       setErrorFlag(errorFlags[3]);\n       return;\n      } \n       \n    if (isExpense && balance === 0) {\n       setErrorFlag(errorFlags[4]);\n      return;\n    }\n    if(Number(amount) > balance && isExpense){\n       setErrorFlag(errorFlags[5]);\n      return;\n    }  \n    if(isNaN(+amount)){\n       setErrorFlag(errorFlags[2]);\n      return;\n    }\n\n    newEntries[changedIndex].description = description;    \n    newEntries[changedIndex].value = amount;    \n    newEntries[changedIndex].isExpense = isExpense;   \n    setEntries(newEntries);\n    resetEntry();   \n  \n}\n\n  function resetEntry(){    \n    setDesc(\"\");\n    setAmount(\"\");\n    setTxnType(true);\n    if(isOpen){setIsOpen(false);}\n  }\n\n  return (\n    <Container >\n        <MainHeader title=\"Budget\"/>\n        <DisplayBalance title=\"Your Balance\"  value = {balance} size=\"small\"/>\n      {balance > 0 ? null : (\n        <p style={{ color: \"red\" }}>Oops!! You have exhausted your balance!</p>\n      )}\n        <DisplayGrid totalIncome={totalIncome} totalExpenses = {totalExpenses}/>\n        <MainHeader title=\"History\" type=\"h3\" />\n        {(entries.length > 0) ?\n        <HistoryBlock entries={entries} handleDelete ={handleDelete} modalDisplayValues={modalDisplayValues}/> :  <p style={{color:\"red\"}}>Nothing to show here</p>}\n\n        <MainHeader title=\"Add a new Transaction\" type=\"h3\"/> \n        <NewTxn handleAddTxn = {handleAddTxn} resetEntry={resetEntry} description={description} amount={amount} isExpense={isExpense} setDesc={setDesc} setAmount={setAmount} setTxnType={setTxnType}/>\n    \n    <ModalEdit idToEdit={idToEdit} resetEntry={resetEntry} isOpen= {isOpen} description = {description} amount = {amount} isExpense = {isExpense} setDesc={setDesc} setAmount={setAmount} setTxnType={setTxnType} modalEditvalues={modalEditvalues} error = {error}/>\n    </Container>\n\n     );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals(console.log);\n"],"sourceRoot":""}